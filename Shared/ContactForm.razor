@using Microsoft.AspNetCore.Components.Forms
@using StubSite.Data

<h1>Contact Us</h1>

<EditForm Model="@contactFormModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="@contactFormModel.Name" style="background-color:silver" />
        <ValidationMessage For="@(() => contactFormModel.Name)" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="@contactFormModel.Email" style="background-color:silver" />
        <ValidationMessage For="@(() => contactFormModel.Email)" />
    </div>

    <div class="form-group">
        <label for="subject">Subject</label>
        <InputText id="subject" class="form-control" @bind-Value="@contactFormModel.Subject" style="background-color:silver" />
        <ValidationMessage For="@(() => contactFormModel.Subject)" />
    </div>

    <div class="form-group">
        <label for="message">Message</label>
        <InputTextArea id="message" class="form-control" @bind-Value="@contactFormModel.Message" style="background-color:silver" />
        <ValidationMessage For="@(() => contactFormModel.Message)" />
    </div>
    @if (string.IsNullOrEmpty(message))
    {
        @if (Disabled)
        {
            <LoadingDots />
        }
        else
        {
            <button type="submit" disabled class="btn btn-primary" style="margin:1em 0">Send</button>
            <br/>
            <div>'Send' is currently disabled for demo, but this would typically send your company an email filled with the contents above</div>
        }
    }
</EditForm>
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(message.StartsWith("Error") ? "alert-danger" : "alert-success")" style="margin:1em 0">
        @message
    </div>
}

@code {
    private ContactFormModel contactFormModel = new();
    private string toAddress = "<your-email-address>";
    private string message;
    private bool Disabled;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private async Task ClearMessage()
    {
        await Task.Delay(3000);
        message = null;
        contactFormModel = new();
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Disabled = true;
            await Task.Delay(100);
            StateHasChanged();
            //await EmailService.SendEmailAsync(contactFormModel.Email, contactFormModel.Subject, contactFormModel.Message);
            message = "Your message has been sent successfully.";
            Disabled = false;
            StateHasChanged();
            await ClearMessage();
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            await ClearMessage();
        }
    }
}
